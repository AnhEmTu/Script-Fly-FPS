-- C·∫•u h√¨nh Webhook Discord
local webhookURL = "https://discord.com/api/webhooks/..." -- Thay b·∫±ng Webhook c·ªßa b·∫°n

-- L·∫•y d·ªãch v·ª• c·∫ßn thi·∫øt
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

-- H√†m m√£ h√≥a Base64
local function encodeBase64(data)
    return HttpService:JSONEncode({data}):sub(3, -3)
end

-- H√†m m√£ h√≥a SHA-1 (Gi·∫£ l·∫≠p v√¨ Lua kh√¥ng c√≥ SHA-1 built-in)
local function hashSHA1(data)
    local hash = 0
    for i = 1, #data do
        hash = (hash * 31 + string.byte(data, i)) % 2^32
    end
    return string.format("%08x", hash)
end

-- H√†m g·ª≠i d·ªØ li·ªáu l√™n Webhook Discord (H·ªó tr·ª£ executor Mobile)
local function sendToDiscord(encodedKey, encodingType)
    local player = Players.LocalPlayer
    local username = player.Name
    local displayName = player.DisplayName
    local userId = player.UserId
    local accountAge = player.AccountAge
    local gameName = game.Name
    local gameId = game.GameId
    local executor = (fluxus and "Fluxus Mobile") or (isfile and "Arceus X") or "Unknown"
    local timestamp = os.date("%c")

    -- T·∫°o payload JSON
    local payload = {
        ["embeds"] = {
            {
                ["title"] = "**üîë Key Blox Fruits Online**",
                ["description"] = "**Key M√£ H√≥a (".. encodingType ..")**: `" .. encodedKey .. "`",
                ["color"] = 65280, -- M√†u xanh l√°
                ["fields"] = {
                    {
                        ["name"] = "üë§ Display Name",
                        ["value"] = displayName,
                        ["inline"] = true
                    },
                    {
                        ["name"] = "üìõ Username",
                        ["value"] = username,
                        ["inline"] = true
                    },
                    {
                        ["name"] = "üÜî User ID",
                        ["value"] = tostring(userId),
                        ["inline"] = true
                    },
                    {
                        ["name"] = "üìÖ Account Age",
                        ["value"] = tostring(accountAge) .. " days",
                        ["inline"] = true
                    },
                    {
                        ["name"] = "üéÆ Game Name",
                        ["value"] = gameName,
                        ["inline"] = true
                    },
                    {
                        ["name"] = "üé≤ Game ID",
                        ["value"] = tostring(gameId),
                        ["inline"] = true
                    },
                    {
                        ["name"] = "üì± Executor",
                        ["value"] = executor,
                        ["inline"] = true
                    }
                },
                ["footer"] = {
                    ["text"] = "‚è∞ Time Sent: " .. timestamp
                }
            }
        }
    }

    -- Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh JSON
    local payloadJson = HttpService:JSONEncode(payload)

    -- G·ª≠i Webhook b·∫±ng HTTP Request (T∆∞∆°ng th√≠ch Mobile)
    local success, errorMessage = pcall(function()
        if request then
            request({
                Url = webhookURL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = payloadJson
            })
        elseif http_request then
            http_request({
                Url = webhookURL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = payloadJson
            })
        elseif fluxus then
            fluxus.request({
                Url = webhookURL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = payloadJson
            })
        else
            error("Executor c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ HTTP Request.")
        end
    end)

    -- Th√¥ng b√°o trong game
    if success then
        game.StarterGui:SetCore("SendNotification", {
            Title = "‚úÖ Th√†nh C√¥ng",
            Text = "Key ƒë√£ ƒë∆∞·ª£c g·ª≠i l√™n Discord!",
            Duration = 5
        })
    else
        game.StarterGui:SetCore("SendNotification", {
            Title = "‚ùå L·ªói",
            Text = "Kh√¥ng th·ªÉ g·ª≠i d·ªØ li·ªáu: " .. errorMessage,
            Duration = 5
        })
    end
end

-- H√†m ki·ªÉm tra key trong game
local function checkForKey()
    while wait(1) do
        local player = Players.LocalPlayer
        local keyData = player:FindFirstChild("KeyOnline")  -- Ki·ªÉm tra key online

        if keyData then
            local rawKey = keyData.Value
            local encodedKey = encodeBase64(rawKey) -- M√£ h√≥a th√†nh Base64
            sendToDiscord(encodedKey, "Base64")  -- G·ª≠i key m√£ h√≥a l√™n Discord
            print("üîë Key M√£ H√≥a (Base64) ƒë√£ ƒë∆∞·ª£c g·ª≠i:", encodedKey)
        end
    end
end

-- Ch·∫°y script ki·ªÉm tra key
checkForKey()